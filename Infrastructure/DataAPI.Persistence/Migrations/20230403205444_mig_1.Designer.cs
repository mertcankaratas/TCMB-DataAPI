// <auto-generated />
using System;
using DataAPI.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAPI.Persistence.Migrations
{
    [DbContext(typeof(ExchangeRateDbContext))]
    [Migration("20230403205444_mig_1")]
    partial class mig_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAPI.Domain.Entities.ExchangeCrossRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("CrossRate")
                        .HasColumnType("numeric");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToCurrency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UnixTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ExchangeCrossRates");
                });

            modelBuilder.Entity("DataAPI.Domain.Entities.ExchangeEffectiveRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("BanknoteBuyying")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BanknoteSelling")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ForexBuyying")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ForexSelling")
                        .HasColumnType("numeric");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<long>("UnixTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ExchangeEffectiveRates");
                });

            modelBuilder.Entity("DataAPI.Domain.Entities.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("ForexBuyying")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ForexSelling")
                        .HasColumnType("numeric");

                    b.Property<int>("Unit")
                        .HasColumnType("integer");

                    b.Property<long>("UnixTime")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ExchangeRates");
                });
#pragma warning restore 612, 618
        }
    }
}
